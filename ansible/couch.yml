# Initialise Couchbase
# Adapted from https://github.com/couchbaselabs/ansible-couchbase-server/blob/master/examples/cluster_init.yml
# Uses couch API: https://developer.couchbase.com/documentation/server/4.0/install/dp4-setup-cli-rest.html
- name: Couchbase Initialisation
  hosts: default

  vars:
    cb_host: 127.0.0.1
    cb_port: 8091
    cb_hostname: 127.0.0.1
    cb_cluster_ram: 256
    cb_cluster_index_ram: 256
    cb_services: kv
    cb_data_path: /opt/couchbase/var/lib/couchbase/data
    cb_index_path: /opt/couchbase/var/lib/couchbase/data
    cb_bucket_type: couchbase
    cb_bucket_ram: 128
    cb_bucket_replicas: 0
    es_host: elastic
    es_port: 9091

  tasks:
    - name: Wait until API is up
      wait_for: "port=8091 delay=2"

    - name: Check cluster
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/pools"
        status_code: 200, 401
      register: cb_status
      delay: 3
      retries: 9
      # Brand new clusters do not require a password. So 401 means the cluster is already initialised.

    - name: Setup Services
      when: cb_status.status != 401
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/node/controller/setupServices"
        method: POST
        body: "services={{ cb_services }}"
        status_code: 200
      delay: 3
      retries: 9

    - name: Initialize node
      when: cb_status.status != 401
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/nodes/self/controller/settings "
        method: POST
        body: "path={{ cb_data_path }}&index_path={{ cb_index_path }}"
        status_code: 200
      delay: 3
      retries: 5

    - name: Setup credentials
      when: cb_status.status != 401
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/settings/web "
        method: POST
        body: "username={{ cb_user }}&password={{ cb_pass }}&port=SAME"
        status_code: 200
      register: cb_setup_result
      delay: 3
      retries: 9
      # until: cb_setup_result.status == 200
      
    - name: Verify node health
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/pools/default"
        user: "{{ cb_user }}"
        password: "{{ cb_pass }}"
        force_basic_auth: yes
        follow_redirects: all
        return_content: yes
        body_format: json
      register: cb_health
      delay: 3
      retries: 20
      until: cb_health.json.nodes[0].status == "healthy"

    - name: Check for aca bucket
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/pools/default/buckets/{{ cb_bucket }}"
        user: "{{ cb_user }}"
        password: "{{ cb_pass }}"
        status_code: 200, 404
      register: aca_bucket_result

    - name: Create new bucket
      when: 
        - cb_health.json.nodes[0].status == "healthy"
        - aca_bucket_result.status == 404
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/pools/default/buckets "
        user: "{{ cb_user }}"
        password: "{{ cb_pass }}"
        force_basic_auth: yes
        follow_redirects: all
        method: POST
        body: "name={{ cb_bucket }}&replicaIndex={{ cb_bucket_replicas }}&ramQuotaMB={{ cb_bucket_ram }}&bucketType={{ cb_bucket_type }}&authType=sasl&saslPassword={{ cb_pass }}"
        status_code: 200, 202

    - name: Get XDCR destination entries
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/pools/default/remoteClusters"
        user: "{{ cb_user }}"
        password: "{{ cb_pass }}"
        force_basic_auth: yes
        follow_redirects: all
        return_content: yes
      register: xdcr_hosts_list
      until: xdcr_hosts_list.status == 200
      delay: 3
      retries: 9

    # Assume no other XDCR destinations were added for now (Later: confirm the list has no elastic entry)
    - name: Add XDCR destination cluster reference for elasticsearch
      when: xdcr_hosts_list.json == []
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/pools/default/remoteClusters "
        user: "{{ cb_user }}"
        password: "{{ cb_pass }}"
        force_basic_auth: yes
        follow_redirects: all
        method: POST
        body: "name={{ es_host }}&hostname={{ es_host }}:{{ es_port }}&username={{ cb_user }}&password={{ cb_pass }}"
        status_code: 200

    - name: Create XDCR to elasticsearch
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/controller/createReplication"
        user: "{{ cb_user }}"
        password: "{{ cb_pass }}"
        force_basic_auth: yes
        follow_redirects: all
        method: POST
        body: "fromBucket={{ cb_bucket }}&toCluster={{ es_host }}&toBucket={{ es_index }}&replicationType=continuous&type=capi"
        status_code: 200, 400
        # 400 when it already exists. OK for now. 
        # Later, only run if it doesn't exist (/pool/default/tasks must not contain the elastic xdcr):
        # example /pools/default/tasks with existing XDCR: 
        # [{"type":"rebalance","status":"notRunning","statusIsStale":false,"masterRequestTimedOut":false},{"cancelURI":"/controller/cancelXDCR/c74f8d9f4fff3e20b82cb556070c6d10%2Faca%2Faca","settingsURI":"/settings/replications/c74f8d9f4fff3e20b82cb556070c6d10%2Faca%2Faca","status":"running","replicationType":"capi","continuous":true,"filterExpression":"","id":"c74f8d9f4fff3e20b82cb556070c6d10/aca/aca","pauseRequested":false,"source":"aca","target":"/remoteClusters/c74f8d9f4fff3e20b82cb556070c6d10/buckets/aca","type":"xdcr","recommendedRefreshPeriod":10,"changesLeft":0,"docsChecked":0,"docsWritten":0,"maxVBReps":null,"errors":[]}]
