# Initialise Couchbase
# Adapted from https://github.com/couchbaselabs/ansible-couchbase-server/blob/master/examples/cluster_init.yml
# Uses couchbase-cli: https://developer.couchbase.com/documentation/server/4.6/cli/cbcli-intro.html
- name: Couchbase Initialisation
  hosts: default

  vars:
    cb_host: 127.0.0.1
    cb_port: 8091
    cb_hostname: 127.0.0.1
    cb_cluster_ram: 256
    cb_cluster_index_ram: 256
    cb_services: data,index
    cb_bucket_type: couchbase
    cb_bucket_ram: 128
    cb_bucket_replicas: 1
    es_host: elastic
    es_port: 9091

  tasks:
    - name: Get major version
      shell: docker exec -i couch cat /opt/couchbase/VERSION.txt | cut -d '.' -f1
      register: cb_major_version

    - name: Wait for Admin
      wait_for: "port=8091 delay=2"

    - name: Initialize primary node
      when: cb_major_version['stdout'] != "2"
      shell: "docker exec -i couch couchbase-cli node-init -c {{ cb_host }}:{{ cb_port }} --user={{ cb_user }} --password={{ cb_password }} --cluster-init-username={{ cb_user }} --node-init-hostname={{ cb_hostname }}"
      

    - name: Wait for Admin
      wait_for: "port=8091 delay=2"

    - name: Configure v3 cluster settings
      when: cb_major_version['stdout'] == "3"
      shell: "docker exec -i couch couchbase-cli cluster-init -c {{ cb_host }}:{{ cb_port }} --user={{ cb_user }} --password={{ cb_password }} --cluster-init-username={{ cb_user }} --cluster-init-password={{ cb_password }} --cluster-init-port=8091 --cluster-ramsize={{ cb_cluster_ram }}"
      delay: 3
      retries: 5

    - name: Configure v4 cluster settings
      when: cb_major_version['stdout'] == "4"
      shell: "docker exec -i couch couchbase-cli cluster-init -c {{ cb_host }}:{{ cb_port }} --user={{ cb_user }} --password={{ cb_password }} --cluster-init-username={{ cb_user }} --cluster-init-password={{ cb_password }} --cluster-init-port=8091 --cluster-ramsize={{ cb_cluster_ram }} --services={{ cb_services }} --cluster-index-ramsize={{ cb_cluster_index_ram }}"
      delay: 3
      retries: 5
      
    - name: Verify node health
      shell: "docker exec -i couch couchbase-cli server-list -c {{ cb_host }}:{{ cb_port }} --user={{ cb_user }} --password={{ cb_password }} | awk '/{{ cb_host }}:{{ cb_port }}/ {print $3}'"
      register: cb_health
      until: cb_health['stdout'] == "healthy"
      delay: 3
      retries: 20

    - name: Check for aca bucket
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/pools/default/buckets/{{ cb_bucket }}"
        user: "{{ cb_user }}"
        password: "{{ cb_password }}"
        status_code: 200, 404
      register: aca_bucket_result

    - name: Create new bucket
      when: 
        - cb_health['stdout'] == "healthy"
        - aca_bucket_result.status == 404
      shell: "docker exec -i couch couchbase-cli bucket-create -c {{ cb_host }}:{{ cb_port }} --user={{ cb_user }} --password={{ cb_password }} --bucket={{ cb_bucket }} --bucket-type={{ cb_bucket_type }} --bucket-password={{ cb_password }} --bucket-ramsize={{ cb_bucket_ram }} --bucket-replica={{ cb_bucket_replicas }}"

    - name: Get XDCR destination entries
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/pools/default/remoteClusters"
        user: "{{ cb_user }}"
        password: "{{ cb_password }}"
        force_basic_auth: yes
        follow_redirects: all
        return_content: yes
      register: xdcr_hosts_list

    # Assume no other XDCR destinations were added for now (Later: confirm the list has no elastic entry)
    - name: Add elasticsearch XDCR host
      when: xdcr_hosts_list.json == []
      shell: "docker exec -i couch couchbase-cli xdcr-setup -c {{ cb_host }}:{{ cb_port }} --user={{ cb_user }} --password={{ cb_password }} --create --xdcr-cluster-name={{ es_host }} --xdcr-hostname={{ es_host }}:{{ es_port }} --xdcr-username={{ cb_user }} --xdcr-password={{ cb_password }}"

    - name: Create XDCR to elasticsearch
      uri:
        url: "http://{{ cb_host }}:{{ cb_port }}/controller/createReplication"
        user: "{{ cb_user }}"
        password: "{{ cb_password }}"
        force_basic_auth: yes
        follow_redirects: all
        method: POST
        body: "fromBucket={{ cb_bucket }}&toCluster={{ es_host }}&toBucket={{ es_index }}&replicationType=continuous&type=capi"
        status_code: 200, 400
        # 400 when it already exists. OK for now. 
        # Later, only run if it doesn't exist (/pool/default/tasks must not contain the elastic xdcr):
        # example /pools/default/tasks with existing XDCR: 
        # [{"type":"rebalance","status":"notRunning","statusIsStale":false,"masterRequestTimedOut":false},{"cancelURI":"/controller/cancelXDCR/c74f8d9f4fff3e20b82cb556070c6d10%2Faca%2Faca","settingsURI":"/settings/replications/c74f8d9f4fff3e20b82cb556070c6d10%2Faca%2Faca","status":"running","replicationType":"capi","continuous":true,"filterExpression":"","id":"c74f8d9f4fff3e20b82cb556070c6d10/aca/aca","pauseRequested":false,"source":"aca","target":"/remoteClusters/c74f8d9f4fff3e20b82cb556070c6d10/buckets/aca","type":"xdcr","recommendedRefreshPeriod":10,"changesLeft":0,"docsChecked":0,"docsWritten":0,"maxVBReps":null,"errors":[]}]
